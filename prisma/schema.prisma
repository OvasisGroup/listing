// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  role          Role            @default(USER) // Add Role field with default value
  accounts      Account[]
  sessions      Session[]

  userType      UserType?

  onboardingCompleted Boolean @default(false)

  Company       Company?
  JobSeeker     JobSeeker?

  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Define Enum for Roles
enum Role {
  USER
  ADMIN
  MODERATOR
}

enum UserType {
  COMPANY
  JOB_SEEKER
}

model Company {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  location      String
  website       String?
  about         String
  logo          String?

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String   @unique

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

}

model JobSeeker {
  id            String   @id @default(cuid())
  name          String
  location      String
  resume        String
  about         String

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String   @unique

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Tvets {
  id            String   @id @default(cuid())
  name          String

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Category model for main categories
model Category {
  id            String        @id @default(cuid())
  name          String        @unique
  slug          String        @unique
  description   String?
  image         String?
  icon          String?
  isActive      Boolean       @default(true)
  subCategories SubCategory[] // Relation to subcategories
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([slug])
}

// SubCategory model for sub-categories
model SubCategory {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  isActive    Boolean  @default(true)
  categoryId  String   // Foreign key to Category

  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([slug])
  @@index([categoryId])
  @@unique([categoryId, name]) // Ensure subcategory names are unique within a category
}

