// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  phone         String?         @unique
  role          Role            @default(USER) // Add Role field with default value
  accounts      Account[]
  sessions      Session[]

  profile       Profile?
  userType      UserType?
  listings      Listing[] // ✅ One-to-many: one user can have multiple listings

  otps       OTP[]    // ✅ One-to-many: one user can have multiple OTPs

  onboardingCompleted Boolean @default(false)
  lastLogin DateTime @default(now()) // Add this field

  Company       Company?
  JobSeeker     JobSeeker?

  messagesSent   Message[] @relation("SentMessages")
  messagesReceived Message[] @relation("ReceivedMessages")

  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Define Enum for Roles
enum Role {
  USER
  ADMIN
  MODERATOR
}

enum UserType {
  COMPANY
  JOB_SEEKER
}

model Message {
  id           String   @id @default(uuid())
  text         String
  senderId     String
  receiverId   String?
  sender       User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver     User?    @relation("ReceivedMessages", fields: [receiverId], references: [id])
  createdAt    DateTime @default(now())
}

model Company {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  location      String
  website       String?
  about         String
  logo          String?

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String   @unique

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

}
model Profile {
  id            String     @id @default(uuid())
  userId        String     @unique
  title         String
  name          String
  image         String?
  location      String?
  about         String?
  telephone     String?
  subCategories SubCategory[] @relation("ProfileSubCategories") // Relation to SubCategory model

  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobSeeker     JobSeeker?  @relation // Relation to JobSeeker
  jobSeekerId   String?     @unique   // Foreign key to JobSeeker

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model JobSeeker {
  id        String   @id @default(uuid())
  name      String
  location  String
  resume    String
  about     String
  profile   Profile? @relation(fields: [profileId], references: [id]) // Relation to Profile
  profileId String?  @unique   // Foreign key to Profile

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation to User
  userId    String   @unique   // Foreign key to User

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Tvets {
  id            String   @id @default(cuid())
  name          String

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Category model for main categories
model Category {
  id            String        @id @default(cuid())
  name          String        @unique
  slug          String        @unique
  description   String?
  image         String?
  icon          String?
  isActive      Boolean       @default(true)
  subCategories SubCategory[] // Relation to subcategories
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  listings      Listing[] // ✅ One-to-many: one category can have multiple listings

  @@index([slug])
}

// SubCategory model for sub-categories
model SubCategory {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  isActive    Boolean  @default(true)
  categoryId  String   // Foreign key to Category

  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  profiles    Profile[]  @relation("ProfileSubCategories") 

  listings    Listing[] // ✅ One-to-many: one subcategory can have multiple listings

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([slug])
  @@index([categoryId])
  @@unique([categoryId, name]) // Ensure subcategory names are unique within a category
}

model Availability {
  id         String   @id @default(uuid())
  userId     String   @unique
  isAvailable Boolean @default(false)
  startDate  DateTime?
  endDate    DateTime?
  startTime  String?  // Storing time as string (e.g., "14:30")
  endTime    String?  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Legal {
  id            String   @id @default(cuid())
  title          String
  body          String

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model About {
  id            String   @id @default(cuid())
  title          String
  body          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Help {
  id            String   @id @default(cuid())
  title          String
  body          String
  createdAt     DateTime @default(now())  
  updatedAt     DateTime @updatedAt
}

model Whoweserve {
  id            String   @id @default(cuid())
  image         String
  title          String
  body          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Category model for main categories
model Premium {
  id            String        @id @default(cuid())
  name          String        @unique
  description   String?
  image         String?
  icon          String?

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model OTP {
  id        String   @id @default(cuid())
  phone     String   @unique // Make phone unique
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())

  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Listing {
  id        String   @id @default(cuid())
  title     String
  description String
  budget     Float
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  subCategoryId String
  subCategory SubCategory @relation(fields: [subCategoryId], references: [id])
  location   String
  status     String   @default("active") // e.g., "active", "completed", "cancelled"
  isFeatured Boolean  @default(false)
  isPremium  Boolean  @default(false)

  startDate DateTime?
  endDate   DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Whychooseus {
  id            String   @id @default(cuid())
  image         String
  title          String
  body          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Whatitmeans {
  id            String   @id @default(cuid())
  title          String
  body          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
