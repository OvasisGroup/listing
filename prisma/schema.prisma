generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String          @id @default(cuid())
  name                String?
  email               String          @unique
  emailVerified       DateTime?
  image               String?
  role                Role            @default(USER)
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  onboardingCompleted Boolean         @default(false)
  userType            UserType?
  lastLogin           DateTime        @default(now())
  phone               String?         @unique
  accounts            Account[]
  Authenticator       Authenticator[]
  Company             Company?
  JobSeeker           JobSeeker?
  listings            Listing[]       @relation("UserListings")
  messagesReceived    Message[]       @relation("ReceivedMessages")
  messagesSent        Message[]       @relation("SentMessages")
  Notifications       Notification[]
  otps                OTP[]
  Payment             Payment[]
  profile             Profile?
  sessions            Session[]
  favorites           Listing[]       @relation("UserFavorites")
}

model Message {
  id         String   @id @default(uuid())
  text       String
  senderId   String
  receiverId String?
  createdAt  DateTime @default(now())
  receiver   User?    @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
}

model Company {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  location  String
  website   String?
  about     String
  logo      String?
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  profile   Profile?
}

model Profile {
  id            String        @id @default(uuid())
  userId        String        @unique
  telephone     String?
  about         String?
  image         String?
  location      String?
  name          String
  title         String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  jobSeekerId   String?       @unique
  companyId     String?       @unique
  tvetId        String?
  jobSeeker     JobSeeker?
  company       Company?      @relation(fields: [companyId], references: [id])
  tvet          Tvets?        @relation(fields: [tvetId], references: [id])
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  subCategories SubCategory[] @relation("ProfileSubCategories")
}

model JobSeeker {
  id        String   @id @default(uuid())
  name      String
  location  String
  resume    String
  about     String
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profileId String?  @unique
  profile   Profile? @relation(fields: [profileId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Tvets {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  profiles  Profile[]
}

model Category {
  id            String        @id @default(cuid())
  name          String        @unique
  slug          String        @unique
  description   String?
  image         String?
  icon          String?
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  subCategories SubCategory[]

  @@index([slug])
}

model SubCategory {
  id         String    @id @default(cuid())
  name       String
  slug       String
  isActive   Boolean   @default(true)
  categoryId String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Listing    Listing[]
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  profiles   Profile[] @relation("ProfileSubCategories")

  @@index([slug])
  @@index([categoryId])
}

model Availability {
  id          String    @id @default(uuid())
  userId      String    @unique
  isAvailable Boolean   @default(false)
  startDate   DateTime?
  endDate     DateTime?
  startTime   String?
  endTime     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Legal {
  id        String   @id @default(cuid())
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model About {
  id        String   @id @default(cuid())
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Help {
  id        String   @id @default(cuid())
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Whoweserve {
  id        String   @id @default(cuid())
  image     String
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Premium {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  image       String?
  icon        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model OTP {
  id        String   @id @default(cuid())
  phone     String   @unique
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Listing {
  id              String        @id @default(cuid())
  title           String
  description     String
  budget          Float
  userId          String
  location        String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  status          ListingStatus @default(active)
  apartmentNumber String
  estateName      String
  duration        Int
  subCategoryId   String
  subCategory     SubCategory   @relation(fields: [subCategoryId], references: [id])
  user            User          @relation("UserListings", fields: [userId], references: [id])
  payment         Payment?
  favoritedBy     User[]        @relation("UserFavorites")

  @@index([subCategoryId])
  @@index([userId])
}

model CleaningForm {
  id           String    @id @default(cuid())
  firstName    String
  lastName     String
  email        String
  phone        String
  address      String
  aptSuite     String
  bedroooms    Int?
  bathrooms    Int?
  cleaningType String?
  description  String?
  contactType  String?
  date         DateTime?
  time         String?
}

model Whychooseus {
  id        String   @id @default(cuid())
  image     String
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Whatitmeans {
  id        String   @id @default(cuid())
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Finance {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Projects {
  id        String   @id @default(cuid())
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image     String
}

model Payment {
  id            String        @id @default(cuid())
  amount        Float
  status        PaymentStatus @default(pending)
  method        PaymentMethod
  listingId     String        @unique
  userId        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  receipt       String?
  phoneNumber   String?
  transactionId String?
  receiptUrl    String?
  listing       Listing       @relation(fields: [listingId], references: [id])
  user          User          @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Faqs {
  id         Int          @id @default(autoincrement())
  title      String
  faqheaders FaqHeaders[]
}

model FaqHeaders {
  id    Int    @id @default(autoincrement())
  title String
  body  String
  faqId Int
  faqs  Faqs   @relation(fields: [faqId], references: [id])
}

model Section {
  id        Int    @id @default(autoincrement())
  maintitle String
  faqs      Faq[]
}

model Faq {
  id          Int     @id @default(autoincrement())
  title       String
  description String
  sectionId   Int
  section     Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)
}

model Blog {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id         String     @id @default(cuid())
  title      String
  content    String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  categoryId String
  image      String?
  category   Categories @relation(fields: [categoryId], references: [id])
}

model Categories {
  id    String @id @default(cuid())
  name  String @unique
  posts Post[]
}

model Notification {
  id        String   @id @default(cuid())
  message   String
  userId    String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum UserType {
  COMPANY
  JOB_SEEKER
}

enum ListingStatus {
  active
  completed
  cancelled
  deactivated
  expired
  pending
}

enum PaymentStatus {
  pending
  paid
  failed
  successful
}

enum PaymentMethod {
  mpesa
  credit_card
  paypal
  stripe
  bank_transfer
}
