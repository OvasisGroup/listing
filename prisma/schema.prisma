// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  phone         String?   @unique
  role          Role      @default(USER) // Add Role field with default value
  accounts      Account[]
  sessions      Session[]

  profile  Profile?
  userType UserType?
  listings Listing[] @relation("UserListings")

  otps OTP[] // ✅ One-to-many: one user can have multiple OTPs

  onboardingCompleted Boolean  @default(false)
  lastLogin           DateTime @default(now()) // Add this field

  Company   Company?
  JobSeeker JobSeeker?

  Notifications Notification[]

  messagesSent     Message[] @relation("SentMessages")
  messagesReceived Message[] @relation("ReceivedMessages")

  // Optional for WebAuthn support
  Authenticator Authenticator[]

  favorites     Listing[] @relation("UserFavorites")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Payment Payment[]
}

// Define Enum for Roles
enum Role {
  USER
  ADMIN
  MODERATOR
}

enum UserType {
  COMPANY
  JOB_SEEKER
}

model Message {
  id         String   @id @default(uuid())
  text       String
  senderId   String
  receiverId String?
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver   User?    @relation("ReceivedMessages", fields: [receiverId], references: [id])
  createdAt  DateTime @default(now())
}

model Company {
  id       String  @id @default(cuid())
  name     String
  email    String  @unique
  location String
  website  String?
  about    String
  logo     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
  profile  Profile?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id            String        @id @default(uuid())
  userId        String        @unique
  title         String
  name          String
  image         String?
  location      String?
  about         String?
  telephone     String?
  subCategories SubCategory[] @relation("ProfileSubCategories") // Relation to SubCategory model

  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobSeeker   JobSeeker? @relation // Relation to JobSeeker
  jobSeekerId String?    @unique // Foreign key to JobSeeker

  company       Company?      @relation(fields: [companyId], references: [id])
  companyId     String?       @unique

  tvet      Tvets?    @relation(fields: [tvetId], references: [id])
  tvetId    String?  // optional foreign key

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobSeeker {
  id        String   @id @default(uuid())
  name      String
  location  String
  resume    String
  about     String
  profile   Profile? @relation(fields: [profileId], references: [id]) // Relation to Profile
  profileId String?  @unique // Foreign key to Profile

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation to User
  userId String @unique // Foreign key to User

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Tvets {
  id   String @id @default(cuid())
  name String

  profiles Profile[] // Relation to profiles

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Category model for main categories
model Category {
  id            String        @id @default(cuid())
  name          String        @unique
  slug          String        @unique
  description   String?
  image         String?
  icon          String?
  isActive      Boolean       @default(true)
  subCategories SubCategory[] // Relation to subcategories
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([slug])
}

// SubCategory model for sub-categories
model SubCategory {
  id         String  @id @default(cuid())
  name       String
  slug       String  
  isActive   Boolean @default(true)
  categoryId String // Foreign key to Category

  category Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  profiles Profile[] @relation("ProfileSubCategories")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // @@unique([categoryId, name]) // Ensure subcategory names are unique within a category
  @@index([slug])
  @@index([categoryId])
}

model Availability {
  id          String    @id @default(uuid())
  userId      String    @unique
  isAvailable Boolean   @default(false)
  startDate   DateTime?
  endDate     DateTime?
  startTime   String? // Storing time as string (e.g., "14:30")
  endTime     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Legal {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model About {
  id        String   @id @default(cuid())
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Help {
  id        String   @id @default(cuid())
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Whoweserve {
  id        String   @id @default(cuid())
  image     String
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Category model for main categories
model Premium {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  image       String?
  icon        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OTP {
  id        String   @id @default(cuid())
  phone     String   @unique // Make phone unique
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Listing {
  id             String        @id @default(cuid())
  title          String
  description    String
  budget         Float
 
  userId         String
  user           User          @relation("UserListings", fields: [userId], references: [id])

  categoryId     String
  category       Categories   @relation(fields: [categoryId], references: [id])

  location       String?

  estateName     String?
  apartmentNumber String?

  status         ListingStatus @default(active)

  duration       Int?

  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  favoritedBy    User[]        @relation("UserFavorites")

  // Payment relation remains unchanged
  payment        Payment?

  @@index([userId])
}

enum ListingStatus {
  active
  completed
  cancelled
  deactivated
  expired
  pending
}

model CleaningForm {
  id          String    @id @default(cuid())
  firstName   String
  lastName    String
  email       String
  phone       String
  address     String
  aptSuite  String
  bedroooms   Int?
  bathrooms   Int?
  cleaningType String?
  description String?
  contactType String?
  date        DateTime?
  time        String?
}

model Whychooseus {
  id        String   @id @default(cuid())
  image     String
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Whatitmeans {
  id        String   @id @default(cuid())
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Finance {
  id        String   @id @default(cuid())
  title     String
  content      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Projects {
  id        String   @id @default(cuid())
  image     String
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Payment {
  id          String    @id @default(cuid())
  amount      Float
  status      PaymentStatus @default(pending)
  method      PaymentMethod
  receipt     String?
  transactionId String?  // MpesaReceiptNumber
  phoneNumber   String?

  listingId   String    @unique // <- ADD @unique here ✅
  listing     Listing   @relation(fields: [listingId], references: [id])
  receiptUrl    String?  // <--- Add this line

  userId      String
  user        User      @relation(fields: [userId], references: [id])

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
}

enum PaymentStatus {
  pending
  paid
  failed
  successful
}

enum PaymentMethod {
  mpesa
  credit_card
  paypal
  stripe
  bank_transfer
}

model Faqs {
  id        Int       @id @default(autoincrement())
  title     String
  faqheaders  FaqHeaders[]
}

model FaqHeaders {
  id      Int    @id @default(autoincrement())
  title   String
  body    String
  faqId  Int
  faqs    Faqs   @relation(fields: [faqId], references: [id])
}

model Section {
  id        Int         @id @default(autoincrement())
  maintitle String
  faqs      Faq[] // Relation to FAQs
}

model Faq {
  id          Int               @id @default(autoincrement())
  title       String
  description String
  sectionId   Int
  section     Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)
}

model Blog {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  image     String?  // Optional featured image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id          String    @id @default(cuid())
  title       String
  image       String?   
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  categoryId  String
  category    Categories  @relation(fields: [categoryId], references: [id])
}

model Categories {
  id    String    @id @default(cuid())
  name  String  @unique
  posts Post[]

  Listing Listing[]
}

model Notification {
  id        String   @id @default(cuid())
  message   String
  userId    String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
}


